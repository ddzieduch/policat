<?php

/**
 * BasePetitionSigning
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $petition_id
 * @property clob $fields
 * @property integer $status
 * @property string $email
 * @property string $country
 * @property integer $validation_kind
 * @property string $validation_data
 * @property integer $widget_id
 * @property integer $wave_sent
 * @property integer $wave_pending
 * @property integer $wave_cron
 * @property integer $subscribe
 * @property string $email_hash
 * @property timestamp $mailed_at
 * @property string $fullname
 * @property string $title
 * @property string $firstname
 * @property string $lastname
 * @property string $address
 * @property string $city
 * @property string $post_code
 * @property clob $comment
 * @property integer $privacy
 * @property string $email_subject
 * @property clob $email_body
 * @property string $ref
 * @property Petition $Petition
 * @property Widget $Widget
 * @property Doctrine_Collection $Contact
 * @property Doctrine_Collection $Search
 * @property Doctrine_Collection $PetitionSigningContact
 * @property Doctrine_Collection $PetitionSigningWave
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method integer             getPetitionId()             Returns the current record's "petition_id" value
 * @method clob                getFields()                 Returns the current record's "fields" value
 * @method integer             getStatus()                 Returns the current record's "status" value
 * @method string              getEmail()                  Returns the current record's "email" value
 * @method string              getCountry()                Returns the current record's "country" value
 * @method integer             getValidationKind()         Returns the current record's "validation_kind" value
 * @method string              getValidationData()         Returns the current record's "validation_data" value
 * @method integer             getWidgetId()               Returns the current record's "widget_id" value
 * @method integer             getWaveSent()               Returns the current record's "wave_sent" value
 * @method integer             getWavePending()            Returns the current record's "wave_pending" value
 * @method integer             getWaveCron()               Returns the current record's "wave_cron" value
 * @method integer             getSubscribe()              Returns the current record's "subscribe" value
 * @method string              getEmailHash()              Returns the current record's "email_hash" value
 * @method timestamp           getMailedAt()               Returns the current record's "mailed_at" value
 * @method string              getFullname()               Returns the current record's "fullname" value
 * @method string              getTitle()                  Returns the current record's "title" value
 * @method string              getFirstname()              Returns the current record's "firstname" value
 * @method string              getLastname()               Returns the current record's "lastname" value
 * @method string              getAddress()                Returns the current record's "address" value
 * @method string              getCity()                   Returns the current record's "city" value
 * @method string              getPostCode()               Returns the current record's "post_code" value
 * @method clob                getComment()                Returns the current record's "comment" value
 * @method integer             getPrivacy()                Returns the current record's "privacy" value
 * @method string              getEmailSubject()           Returns the current record's "email_subject" value
 * @method clob                getEmailBody()              Returns the current record's "email_body" value
 * @method string              getRef()                    Returns the current record's "ref" value
 * @method Petition            getPetition()               Returns the current record's "Petition" value
 * @method Widget              getWidget()                 Returns the current record's "Widget" value
 * @method Doctrine_Collection getContact()                Returns the current record's "Contact" collection
 * @method Doctrine_Collection getSearch()                 Returns the current record's "Search" collection
 * @method Doctrine_Collection getPetitionSigningContact() Returns the current record's "PetitionSigningContact" collection
 * @method Doctrine_Collection getPetitionSigningWave()    Returns the current record's "PetitionSigningWave" collection
 * @method PetitionSigning     setId()                     Sets the current record's "id" value
 * @method PetitionSigning     setPetitionId()             Sets the current record's "petition_id" value
 * @method PetitionSigning     setFields()                 Sets the current record's "fields" value
 * @method PetitionSigning     setStatus()                 Sets the current record's "status" value
 * @method PetitionSigning     setEmail()                  Sets the current record's "email" value
 * @method PetitionSigning     setCountry()                Sets the current record's "country" value
 * @method PetitionSigning     setValidationKind()         Sets the current record's "validation_kind" value
 * @method PetitionSigning     setValidationData()         Sets the current record's "validation_data" value
 * @method PetitionSigning     setWidgetId()               Sets the current record's "widget_id" value
 * @method PetitionSigning     setWaveSent()               Sets the current record's "wave_sent" value
 * @method PetitionSigning     setWavePending()            Sets the current record's "wave_pending" value
 * @method PetitionSigning     setWaveCron()               Sets the current record's "wave_cron" value
 * @method PetitionSigning     setSubscribe()              Sets the current record's "subscribe" value
 * @method PetitionSigning     setEmailHash()              Sets the current record's "email_hash" value
 * @method PetitionSigning     setMailedAt()               Sets the current record's "mailed_at" value
 * @method PetitionSigning     setFullname()               Sets the current record's "fullname" value
 * @method PetitionSigning     setTitle()                  Sets the current record's "title" value
 * @method PetitionSigning     setFirstname()              Sets the current record's "firstname" value
 * @method PetitionSigning     setLastname()               Sets the current record's "lastname" value
 * @method PetitionSigning     setAddress()                Sets the current record's "address" value
 * @method PetitionSigning     setCity()                   Sets the current record's "city" value
 * @method PetitionSigning     setPostCode()               Sets the current record's "post_code" value
 * @method PetitionSigning     setComment()                Sets the current record's "comment" value
 * @method PetitionSigning     setPrivacy()                Sets the current record's "privacy" value
 * @method PetitionSigning     setEmailSubject()           Sets the current record's "email_subject" value
 * @method PetitionSigning     setEmailBody()              Sets the current record's "email_body" value
 * @method PetitionSigning     setRef()                    Sets the current record's "ref" value
 * @method PetitionSigning     setPetition()               Sets the current record's "Petition" value
 * @method PetitionSigning     setWidget()                 Sets the current record's "Widget" value
 * @method PetitionSigning     setContact()                Sets the current record's "Contact" collection
 * @method PetitionSigning     setSearch()                 Sets the current record's "Search" collection
 * @method PetitionSigning     setPetitionSigningContact() Sets the current record's "PetitionSigningContact" collection
 * @method PetitionSigning     setPetitionSigningWave()    Sets the current record's "PetitionSigningWave" collection
 * 
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePetitionSigning extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('petition_signing');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('petition_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('fields', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             ));
        $this->hasColumn('country', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('validation_kind', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('validation_data', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('widget_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('wave_sent', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 2,
             ));
        $this->hasColumn('wave_pending', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 2,
             ));
        $this->hasColumn('wave_cron', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('subscribe', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('email_hash', 'string', 80, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 80,
             ));
        $this->hasColumn('mailed_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
        $this->hasColumn('fullname', 'string', 120, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 120,
             ));
        $this->hasColumn('title', 'string', 10, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 10,
             ));
        $this->hasColumn('firstname', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('lastname', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('address', 'string', 200, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 200,
             ));
        $this->hasColumn('city', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('post_code', 'string', 50, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 50,
             ));
        $this->hasColumn('comment', 'clob', null, array(
             'type' => 'clob',
             'notnull' => false,
             ));
        $this->hasColumn('privacy', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 1,
             ));
        $this->hasColumn('email_subject', 'string', 250, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 250,
             ));
        $this->hasColumn('email_body', 'clob', null, array(
             'type' => 'clob',
             'notnull' => false,
             ));
        $this->hasColumn('ref', 'string', 250, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 250,
             ));


        $this->index('signing_petition_count_index2', array(
             'fields' => 
             array(
              0 => 'petition_id',
              1 => 'status',
              2 => 'created_at',
             ),
             ));
        $this->index('signing_petition_count_index3', array(
             'fields' => 
             array(
              0 => 'petition_id',
              1 => 'status',
              2 => 'country',
              3 => 'created_at',
             ),
             ));
        $this->index('signing_widget_count_index2', array(
             'fields' => 
             array(
              0 => 'widget_id',
              1 => 'status',
              2 => 'country',
              3 => 'created_at',
             ),
             ));
        $this->index('signing_widget_count_index3', array(
             'fields' => 
             array(
              0 => 'widget_id',
              1 => 'status',
              2 => 'created_at',
             ),
             ));
        $this->index('signing_wave_sent_index', array(
             'fields' => 
             array(
              0 => 'wave_sent',
             ),
             ));
        $this->index('signing_wave_pending_index', array(
             'fields' => 
             array(
              0 => 'wave_pending',
             ),
             ));
        $this->index('signing_wave_cron_index', array(
             'fields' => 
             array(
              0 => 'wave_cron',
             ),
             ));
        $this->index('signing_subsrcibe', array(
             'fields' => 
             array(
              0 => 'subscribe',
             ),
             ));
        $this->index('signing_country', array(
             'fields' => 
             array(
              0 => 'country',
             ),
             ));
        $this->index('signing_email_hash', array(
             'fields' => 
             array(
              0 => 'email_hash',
             ),
             ));
        $this->index('signing_pending_index2', array(
             'fields' => 
             array(
              0 => 'status',
              1 => 'created_at',
              2 => 'id',
             ),
             ));
        $this->index('signing_pending_index3', array(
             'fields' => 
             array(
              0 => 'status',
              1 => 'mailed_at',
              2 => 'updated_at',
              3 => 'id',
             ),
             ));
        $this->option('non_json_fields', array(
             'fields' => 
             array(
              0 => 'email',
              1 => 'country',
              2 => 'subscribe',
              3 => 'fullname',
              4 => 'title',
              5 => 'firstname',
              6 => 'lastname',
              7 => 'address',
              8 => 'city',
              9 => 'post_code',
              10 => 'comment',
              11 => 'privacy',
              12 => 'email_subject',
              13 => 'email_body',
              14 => 'ref',
             ),
             ));
        $this->option('old_json_fields', array(
             'fields' => 
             array(
              0 => 'fullname',
              1 => 'title',
              2 => 'firstname',
              3 => 'lastname',
              4 => 'address',
              5 => 'city',
              6 => 'post_code',
              7 => 'comment',
              8 => 'privacy',
              9 => 'email_subject',
              10 => 'email_body',
              11 => 'ref',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Petition', array(
             'local' => 'petition_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Widget', array(
             'local' => 'widget_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Contact', array(
             'refClass' => 'PetitionSigningContact',
             'local' => 'petition_signing_id',
             'foreign' => 'contact_id'));

        $this->hasMany('PetitionSigningSearch as Search', array(
             'local' => 'id',
             'foreign' => 'id'));

        $this->hasMany('PetitionSigningContact', array(
             'local' => 'id',
             'foreign' => 'petition_signing_id'));

        $this->hasMany('PetitionSigningWave', array(
             'local' => 'id',
             'foreign' => 'petition_signing_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}